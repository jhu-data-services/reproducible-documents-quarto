---
title: "Creating Reproducible Documents with Quarto"
author:
  - name: Lubov McKone
    email: lmckone1@jh.edu
    role: Data Management Specialist
    degrees: MSLIS
    affiliations:
      - name: Johns Hopkins Sheridan Libraries - Data Services
format: 
  revealjs:
    incremental: true
    embed-resources: true
title-slide-attributes:
  data-background-image: /img/Quarto_comet.png
  data-background-size: contain
  data-background-opacity: "0.4"
editor: visual
embed-resources: true
---

## About Data Services {.center style="text-align: center"}

We help faculty, researchers, and students find, use, manage, visualize and share data.

<https://dataservices.library.jhu.edu/>

dataservices\@jhu.edu

## About you {.center}

Using the Zoom ✅ reaction,

-   Have you used Quarto before?

-   Have you used RMarkdown before?

## About you {.center}

Please open the [etherpad](https://etherpad.wikimedia.org/p/Quarto_Fall_2024) (link in the chat), and answer the following questions

1.  Do you use a programming language (such as R, Python, etc.) for your research? If so, which one?
2.  What is bringing you to this training? What kinds of documents or outputs are you hoping to use Quarto to create?

::: notes
Send etherpad link in chat: <https://etherpad.wikimedia.org/p/Quarto_Fall_2024>
:::

## Today

::::: columns
::: {.column width="50%"}
-   Background

-   Quarto tour

-   **Hands-on portion:** Creating documents & presentations

-   **Demo portion:** Creating manuscripts & beyond

-   Resources & further learning
:::

::: {.column width="50%"}
![Artwork from "Hello, Quarto" keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.](img/Quarto_penguins.png){fig-align="center"}
:::
:::::

::: notes
-   Quarto is extremely powerful and can do A LOT - today's training will not be exhaustice, but will give you the tools to get started, and show you where to look to learn more
:::

## Quarto overview

-   Quarto is an **authoring framework** for data science.

-   It is a tool that allows you to create a **variety of output documents** (HTML, PDF, MS Word, MS PowerPoint, and more!) from a combination of **text and code** (in R, Python, Julia, and more)**.**

![](img/Quarto_outputs.png){fig-align="center"}

::: notes
-   Quarto is a tool that helps you create a lot of different things from a combination of text, code, and output
:::

## Like this

::::: columns
::: {.column width="50%"}
Here's an [example](https://quarto-dev.github.io/quarto-gallery/articles/html/html.html)

![](img/document_example.png){fig-align="center"}
:::

::: {.column width="50%"}
Here's [even more examples](https://quarto.org/docs/gallery/)

![](img/gallery.png){fig-align="center"}
:::
:::::

::: notes
Paste links in chat:

<https://quarto-dev.github.io/quarto-gallery/articles/html/html.html>

<https://quarto.org/docs/gallery/>
:::

## Quarto as next-generation R Markdown

::::: columns
::: {.column width="50%"}
-   Quarto unifies and extends the R Markdown ecosystem

    -   unifies for people who love R Markdown and all its spinoffs

    -   extends for people who don't know R Markdown
:::

::: {.column width="50%"}
![](img/RMarkdown_ecosystem.PNG){fig-align="center"}
:::
:::::

::: notes
-   If you are familiar with RMarkdown, you can think of Quarto as an evolution of RMarkdown.

-   The core ideas of RMarkdown were really sound and posed huge possibilities for reproducibility in research - but was limited to R, and operated almost entirely on workarounds to make anything other than a general document

-   Quarto built on the creativity of the R community and implemented spinoffs for slides (xaringen), books (bookdown), websites (blogdown), and dashboards (Shiny) etc. more formally

-   Compared to RMarkdown, Quarto offers expanded options for **inputs** (support for more programming languages than R), and more **outputs** (not just documents, but slides, websites, books, manuscripts. and more)
:::

## Quarto: Why?

::::: columns
::: {.column width="50%"}
-   We can think of *notebooks* as documents that mix prose, code, and output.

-   Providing notebooks as curated research outputs would greatly enhance transparency and reproducibility.
:::

::: {.column width="50%"}
![Page from a laboratory notebook of Alexander Graham Bell, 1876.](img/AGBell_Notebook.jpg){fig-align="center"}
:::
:::::

::: notes
-   The image on the slide is a notebook that belonged to Alexander Graham Bell, an inventor and scientist who is credited with patenting the first telephone.

-   The notebook contains a diagram of some kind of system, in addition to notes about how the system works. With the level of detail present, we can maybe imagine that someone could create this system themselves based on the diagram and Bell's annotation of it.

-   So what does this have to do with Quarto? Quarto's goal is to make it easy to create and distribute computational notebooks.

-   When I say notebooks, you might immediately think of Jupyter notebooks, which are definitely notebooks, but we're thinking more broadly of notebooks as documents that combine prose, code, and outputs in order to make it easy to follow the creator's thought process and ultimately, reproduce their results.

-   We can imagine that if notebooks were accepted as research outputs at the same level as peer-reviewed articles, that would increase the transparency and reproducibility of research.

-   Current peer-review and publication workflows do not readily support notebooks as research outputs, or encourage their use. This is for a number of different reasons, one of the most foundational being that there isn't one tool or platform that makes it easy to create flexible, collaborative computational notebooks.

-   Quarto is posit's effort to create free, open-source, easy-to-use infrastructure for reproducible research.
:::

## Quarto: How?

-   Quarto documents can be edited and rendered in **RStudio**, **Jupyter Notebooks**, and **Visual Studio**, and via the **Quarto Command Line Interface.**
-   What happens when a Quarto document is rendered:

![](img/Quarto_rendering.png){fig-align="center"}

::: notes
-   We start with a Quarto document, which is what we're going to create today

-   When we "render" a Quarto document, it passes through an engine - options are knitr and jupyter, that render all of the markdown to text, and executes the code chunks and adds the output to the markdown.

-   Then the markdown is passed through pandoc, a document conversion tool that gives us our polished outputs

-   We only see the first and last steps here - the middle steps happen behind the scenes.
:::

## Quarto engines 🚂

-   Quarto engines do two things:

    1.  Execute code

    2.  Render text, code, and output into markdown (“make it pretty”)

-   Quarto's current engines (knitr and Jupyter) can execute R, Python, Julia, ObservableJS, and many more languages.

-   You can select an engine or R will automatically detect which engine to use based on your document. Functionally, the engines are extremely similar, and are *almost* identical in syntax

::: notes
-   The engines are very similar in what they do, just different in how they do it

-   At a base level, both the knitr and jupyter engines can execute all of the Markdown and R or Python code. For more obscure languages, support may differ by engine. There are also very slight differences in some of the chunk options you can specify that don't become relevant until you are using Quarto in a very advanced way, and will never break your code.

-   You won't notice the difference in engines until you are doing very very advanced things with Quarto

-   If you don't select an engine, R will detect which to use based on your code and which dependencies you have installed.
:::

## Quarto engines

::::: columns
::: {.column width="50%"}
**knitr 🧶**

-   Renders R and Julia natively.

-   Renders python via the `reticulate` package

-   Comes installed with RStudio.

-   Best for Quarto beginners or RMarkdown converts.
:::

::: {.column width="50%"}
**Jupyter 🪐**

-   Renders R, Python, Julia, and many more languages natively.

-   Requires installation of Jupyter, in addition to any other kernels you might.

-   Best for those who are familiar with Jupyter.
:::
:::::

::: notes
-   reticulate creates a container for Python inside of R and allows for two-way communication between the environments - we will go into this more later
:::

## Quarto tour

-   When you create a Quarto document, you will see options for many different type of output documents, and a place to designate the engine you would like to use.

    -   We recommend not setting an engine. This will allow Quarto to dynamically select an engine based on the content you have in your document.

-   The YAML header controls the document format and is automatically generated based on options you select when creating your document.

    -   There are thousands of YAML header options that vary by output type, a good reference [here](https://quarto.org/docs/reference/).

::: notes
-   Open RStudio

-   Navigate to the directory you want to work in, make a directory called Quarto - show how to do this in Files

-   Create a new R Project in the directory

-   Select `New File > Quarto Document`

-   Fill out title and author

-   Note the engine selection and explain that they should leave this as-is because Quarto detects which engine to use based on the code chunks present.

-   At a base level, both the knitr and jupyter engines can execute all of the Markdown and R or Python code. For more obscure languages, support may differ by engine. There are also very slight differences in some of the chunk options you can specify that don't become relevant until you are using Quarto in a very advanced way, and will never break your code.

-   Point out all of the possible output formats, within document and also on the sidebar. Note that LaTex is require for PDF outputs.

-   Create the document

-   Toggle between the source and visual and note that we will only be working in the visual editor. Note that if you are familiar with RMarkdown this is a huge improvement and creates a lower barrier to entry in a word processor-like environment

-   Go over the YAML header. YAML is a markup language that is interpreted by the Quarto engines. The YAML header controls the document format and there are thousands of options for how Quarto can display things, listed here <https://quarto.org/docs/reference/>, we will edit the YAML header later.

-   Go over the contents of the document and render it (make sure to go to Render Settings \> Viewer Pane), giving it a title when prompted.
:::

## Text in documents

-   Create headings and text by typing in the visual editor

-   Insert citations by DOI, crossref search, or from your Zotero library with `Insert > Citation` or with `@`

-   Insert footnotes with `Insert > Footnote`

-   Add tabsets to separate components of your analysis with `Insert > Tabset`

::: notes
-   Delete everything in the template document except the YAML header

-   Create the headings Introduction, Data Processing and Exploratory Data Analysis

-   Under Introduction, add "This is a notebook for the Scurvy Lab at JHU to share code and results. The Scurvy Lab studies the efficacy of different nutrients on treating scurvy."

-   Under Data Processing, add "This is where we will process our data for analysis."

-   Under Exploratory Data Analysis, add "This is where we will explore our data."

-   Render - show in Files that what it created was an html document because we said output should be html.

-   Set toc: true in the YAML header (show auto-complete feature) and render, show that toc now shows up

-   Add citation in Introduction (search Treatise on Scurvy in citation manager and pick 1953). Note that you can also pull citations directly from Zotero if you have it running on your computer. Note that bibliography is added to the YAML header.

-   Add tabsets under Exploratory Data Analysis: Gum Rot, Skin Sores, Knee Weakness, Lassitude, render
:::

## Code in documents

-   Insert executable code with `Insert > Executable Cell` - you can combine programming languages in one document

-   Specify options for displaying code chunks with `#|` at the beginning of the code chunk (see next slide).

-   Specify options for displaying code chunks globally in the YAML header with `execute:` followed by the option.

## Code execution options

| when set to false (i.e. `eval: false`) | run code | show code | show output | show warning | show errors |
|------------|------------|------------|------------|------------|------------|
| `eval` | ❌ | ✔️ | ❌ | ❌ | ❌ |
| `echo` | ✔️ | ❌ | ✔️ | ✔️ | ✔️ |
| `output` | ✔️ | ✔️ | ❌ | ❌ | ❌ |
| `include` | ✔️ | ❌ | ❌ | ❌ | ❌ |
| `warning` | ✔️ | ✔️ | ✔️ | ❌ | ✔️ |
| `error` | ✔️ | ✔️ | ✔️ | ✔️ | ❌ |

::: notes
-   Add an R code chunks under Introduction to load libraries (note that we want this as high up in our document as possible to make our data available)

    `library(medicaldata) library(dplyr) library(ggplot2) library(reticulate) scurvy <- medicaldata::scurvy`

-   Open up the scurvy dataset, describe what it is and note that we want to turn the severity values into numeric variables.

-   Add another R code chunk under Data Processing that turns the symptom rankings into numeric variables `scurvy_processed <- scurvy |> mutate_at(c(4:8), ~as.numeric(substr(., start = 1, stop = 1)))`

    -   Render it and note that we are seeing the code we wrote in addition to all of R's messaging when we load our packages

    -   Just like the whole document has YAML that tells it how to display, each code chunk can also have YAML telling it how to display

    -   To suppress this we can add a code chunk option with `#| output: false` (this is code-chunk specific YAML)

    -   Show what happens if we do `#| echo: false`

    -   Show that we could do `#| include: false` if we don't want to include the code or warnings

    -   We will settle on `#| warning: false` since that is exactly what we want to suppress.

    -   Decide that we don't want to display any warnings in the entire document, so we will put the warning: false option into the YAML header under `execute:` .

    -   Decide that we only want to display the data processing code, not loading libraries and reading data. Add `|# include: false` to the libraries chunk.
:::

## Other code options

-   You can add annotations to your code by inserting a number tag, like `# <1>`, next to the line of code you want to annotate. Then, immediate under the code chunk, add the number followed by the annotation, like `1. [Insert annotation text]`

-   To allow users to expand or hide code chunks, you can add the option `code-fold: true` under `format: html:` in the YAML header, or as an options for a specific code chunk with `#| code-fold: true`

::: notes
-   Add an annotation to our data processing code using `# <1>` next to the code line and `1. For columns that represent severity of symptoms on day 6` immediately underneath the code chunk. Add `# <2>` and `2. Extract only the first character, and convert to numeric`. Add `code-annotations: hover` to the YAML header.

-   Add `#| code-fold: true` to the code chunk options. Note that this can be added to the YAML header as well with `format: html: code-fold: true` to fold all code chunks.
:::

## Inline code ⛸️

-   You can add inline code to your document text with the syntax `{r} 2 + 2` surrounded by backticks `` ` ``

-   The above will render in your Markdown to 4

::: notes
-   Add inline code to calculate and display the number of sailors in the study `{r} n_distinct(scurvy$study_id)`
:::

## Using Python and R together 🐍

-   Quarto can execute Python and R together in the same document with the `reticulate` R package

-   When you add a Python code chunk to a Quarto document, R will ask if you want to create a `reticulate` environment for the document. This will manage the Python version and packages you have access to in the document.

-   Once you do this, you will see that you now have a Python Console and Environment in addition to R.

-   You can reference R objects in Python with `r.` , and vice versa with `py$`.

::: notes
-   Add R data visualization code under Gum Rot to create a plot of gum rot severity on day 6 by treatment

    -   `scurvy_processed |> group_by(treatment) |> summarise(gum_rot_severity = mean(gum_rot_d6)) |> ggplot() + geom_col(aes(treatment, gum_rot_severity))`

-   Add Python data visualization code under Skin Sores to create a plot of skin sore severity on day 6 by treatment - note that you can reference objects in the R environment with `r.`

    -   `scurvy_processed = r.scurvy_processed`

    -   `scurvy_processed.groupby('treatment').skin_sores_d6.mean().plot(kind = "bar")`

-   Show that when I add a Python code chunk, Quarto will ask me if I want to create a reticulate environment in R. After this finishes running, show that I now have a Python console and a Python environment in my RStudio

-   List the packages I have with `py_list_packages()` (do this in the R console, not the Python one, because the function comes from the reticulate package, which is installed in R) - note that we will need pandas and matplotlib for our visualization, show how to install with `py_install("packagename")`
:::

## Referencing outputs in documents

-   You can make figures produced by code chunks can be referenced from elsewhere in your document by specifying the code chunk option `#| label:` and giving it a label with the prefix `fig-` .

-   The output can then be referenced in your document text with `@fig-label` .

-   Images, tables, and numbers can also be referenced, but the syntax differs - see [here](https://quarto.org/docs/authoring/cross-references.html) for a full reference.

::: notes
-   Add a heading for Discussion

-   Add the labels `#| label: fig-gum-rot` and `#| label: fig-skin-sore` to the code chunks generating the visualizations

-   Add text referencing them under Discussion with `@fig-gum-rot` and `@fig-skin-sore` - "As seen in @fig-gum-rot and @fig-skin-sore, citrus is the best treatment for scurvy."
:::

## Slides in Quarto

-   One of the nicest things about Quarto is that you can easily convert between output formats

    -   Go from document to slides by changing `format: html` to `format: revealjs` in the YAML header
    -   Slides are delineated by headings

-   Create Quarto slides from scratch with `New File > Quarto Presentation`

::: notes
-   Render and note that our code has gone missing

-   Note that in slides, the default is for code to be hidden (echo: false) so for slides (not documents!) we have to specify `echo: true` in the data processing code only. We decide we actually don't want the rest of the code to display

-   Re-render and show how our document has turned into slides.

-   Note that the transformation from document to slides is never perfect, i.e. figures getting cut off, but it's a whole lot easier than starting from scratch

-   Note that you can change figure height in YAML, or customize things like the font size of the tabsets using Quarto's version of css, and I will link resources for that in the slides I send out.
:::

## Quarto slides features

-   Add slide notes with `Insert > Slide Notes`

-   Speaker View allows for easy presenting, and PDF export mode allows for easy sharing

-   You can add the ability to annotate slides with `format: revealjs: chalkboard: true`

::: notes
-   Add notes to a slide

-   Show how the slides present in a window, show Speaker View and PDF Export Mode

-   Add slide annotation with `format: revealjs: chalkboard: true`
:::

## Quarto Dashboards

-   Like Shiny, but with a focus on layout and organization of components without native reactivity or interactivity.

-   Interactivity can be added to dashboards with Shiny components.

-   See this presentation on [Quarto Dashboards](•%20https://mine.quarto.pub/quarto-dashboards/) for more!

## Quarto manuscripts 📜

-   Let's explore a Quarto [manuscript](https://quarto-ext.github.io/manuscript-template-jupyter/)

-   In RStudio:

    -   Create a manuscript with New Project \> New Directory \> Quarto Manuscript

    -   Add new journal format in the Terminal window with `quarto add quarto-journals/plos`, full list of journal formats [here](https://github.com/quarto-journals), and change outputs in `_quarto.yml`

::: notes
-   Quarto is trying to make it easier to integrate notebooks into expected research outputs

-   Link manuscript example <https://quarto-ext.github.io/manuscript-template-jupyter/> and explore

-   Show how you would create a manuscript with RStudio \> New Project \> New Directory \> Quarto Manuscript (point out other formats as well), but then navigate to the La Palma example (switch to the manuscript project)

-   Go over the front matter in the qmd YAML header - note how much more information we have here

-   Go over the \_quarto.yml, this controls some manuscript-specific settings for the document, like output formats, which we will look at later

-   Render the manuscript in the Viewer Pane - note the download options, and how much of the content is similar to what we just learned

-   for the agu template, we had to run `quarto add template quarto-journals/agu` . See all journal templates here - open link <https://github.com/quarto-journals>

-   Note that you can also supply options for what stage your manuscript is - preprint, review, doubleblind

-   Note that you can add multiple journal formats to a single Quarto document and it will convert it for you and pull the relevant front matter

-   Add another journal format to the manuscript - do `quarto add template quarto-journals/elsevier` - then navigate to quarto.yml and add `elsevier-pdf: default`

-   Re-render and show that the new format shows up as a download option.
:::

## Referencing external notebooks

-   Within your manuscript, create a folder called **notebooks**

-   Insert any .qmd or .ipynb notebooks that you'd like to reference in your manuscript

-   You can embed code and/or output in your manuscript without runnning it every time you render you manuscript, go to Insert \> Shortcode and type `embed notebooks/NotebookName.qmd#cell-label`

::: notes
-   Point out the embed code in the manuscript - how you can separate computationally expensive tasks from the quarto manuscript
:::

## 

![Artwork from "Hello, Quarto" keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.](img/quarto-glacier.png){fig-align="center"}

## Further learning

::: nonincremental
-   [Reproducible Manuscripts with Quarto, Mine Çetinkaya-Rundel, posit::conf(2023)](https://www.youtube.com/watch?v=BoiW9UWDLY0&t=630s)

-   [Reproducible Manuscripts with Quarto, JJ Allaire, Bioconductor](https://www.youtube.com/watch?v=0wB4K08ui4c)

-   [Custom CSS for Quarto with Sass](https://quarto.org/docs/presentations/revealjs/themes.html)

-   [Customizing figures in Quarto](https://qmd4sci.njtierney.com/changing-figures)

-   [Using parameters in Quarto documents](https://quarto.org/docs/computations/parameters.html)
:::

## thank you! 🙏

Please let us know what you thought of this workshop at [bit.ly/quarto-survey](https://bit.ly/quarto-survey)

Any questions?

[**Upcoming workshops**](https://dataservices.library.jhu.edu/training-workshops/calendar/)**:**

::: nonincremental
-   Data Bytes: The Hidden Mapping Powers of ArcGIS Arcade: 11/18 12-1pm

-   Finding a Repository to Share Research Data: 12/3 12-1pm
:::

::: notes
survey link: [bit.ly/quarto-survey](https://bit.ly/quarto-survey)
:::
